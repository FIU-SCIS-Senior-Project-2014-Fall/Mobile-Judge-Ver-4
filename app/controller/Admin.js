var taskLiveStatsTimer; Ext.define("OnlineJudges.controller.Admin", { extend: "Ext.app.Controller", requires: ["Ext.Anim"], config: { views: ["admin.Main", "admin.Home", "admin.NewQuestion", "admin.SendInvitation", "admin.StudentView", "admin.Questions", "admin.Settings", "admin.Judges", "admin.JudgesGrades", "admin.Students", "admin.Grade", "admin.Invitations", "admin.ChangePwd", "admin.Email", "admin.NewEmailTemplate", "admin.JudgesOptions", "admin.Livestats", "admin.LivestatsList", "admin.StatsList", "admin.LivestatsGraph", "admin.TermsList", "admin.PendingGrades", "admin.PastJudgesOptions"], stores: ["Questions", "Students", "Judges", "student.Judges", "Invitations", "InvitationEmails", "AddJudgesList", "Livestats", "LivestatsGraph", "Terms", "StudentsContacts", "JudgesContacts", "LoginInstance", "ExtraEmails", "EmailTemplates", "PendingGrades"], refs: { main: "adminMain", navBtn: "adminMain #navigBtn", logoutBtn: "adminMain #logoutBtn", backBtn: "adminMain #backBtn", judgesOptions: { autoCreate: true, selector: "judgesOptions", xtype: "judgesOptions" }, pastJudgesOptions: { autoCreate: true, selector: "pastJudgesOptions", xtype: "pastJudgesOptions" }, emailTemplate: { autoCreate: true, xtype: "emailTemplate", selector: "emailTemplate" }, AddJudgeBtn: "adminMain #AddJudgeBtn", GradeSaveBtn: "adminMain #GradeSaveBtn", LivestatsBtn: "adminMain #LivestatsBtn", rolesBtn: "adminMain #rolesBtnAdmin", studentEmail: "adminStudentView #studentEmail", studentFName: "adminStudentView #studentFName", studentLName: "adminStudentView #studentLName", studentEmail: "adminStudentView #studentEmail", terms: { autoCreate: true, selector: "termsList", xtype: "termsList" } }, control: { adminMain: { show: "onAdminLoadRoles", back: "onHomeBack" }, "adminMain #navigBtn": { tap: "onNavBtnTap" }, "adminMain #backBtn": { tap: "onBackBtnTap" }, "adminMain adminHome": { show: "onHomeTabShow" }, "adminMain #AddJudgeBtn": { tap: "onAddJudgeTap" }, "adminMain tabpanel tabpanel": { show: "onPeopleTabShow", activeitemchange: "onPeopleTabChange", hide: "onPeopleTabHide" }, "adminMain adminStudents": { itemtap: "onStudentsListTap" }, "adminMain adminJudgesGrades": { itemtap: "onJudgeGradeListTap" }, "adminMain questions": { show: "onQuestionsTabShow", itemswipe: "onQuestionsListSwipe" }, "adminMain settings": { show: "onSettingsTabShow" }, "settings #changePwdBtn": { tap: "onChangePasswordBtnTap" }, "settings #resetBtn": { tap: "onResetAppBtnTap" }, "settings selectfield": { change: "onTermsFieldChange" }, "adminStudentView button[ui=forward]": { tap: "onStudentShowJudgesTap" }, "adminStudentGrade button": { tap: "onAcceptJudgeGradeTap" }, email: { show: "onEmailShow", activeitemchange: "onEmailActiveItemChange", hide: "onEmailHide" }, invitations: { activeitemchange: "onInvitationsActiveItemChange" }, "email selectfield": { change: "onTemplateFieldChange" }, "email checkboxfield[name=allStudents]": { check: "onAllStudentsChecked", uncheck: "onAllStudentsUnchecked" }, "email checkboxfield[name=activeStudents]": { uncheck: "onActiveStudentsUnchecked", check: "onActiveStudentsCheck" }, "email checkboxfield[name=allJudges]": { check: "onAllJudgesChecked", uncheck: "onAllJudgesUnchecked" }, "email checkboxfield[name=activeJudges]": { check: "onActiveJudgesChecked", uncheck: "onActiveJudgesUnchecked" }, "email checkboxfield[name=pastJudges]": { uncheck: "onPastJudgesUnchecked", check: "onPastJudgesChecked" }, "email checkboxfield[name=pastStudents]": { uncheck: "onPastStudensUncheck", check: "onPastStudentsCheck" }, "email button[name=addTemplate]": { tap: "onAddTemplateTap" }, "invitations button[name=addTemplate]": { tap: "onAddTemplateTap" }, "email button[name=editTemplate]": { tap: "onEditTemplateTap" }, "judgesOptions checkboxfield[name=invitedJudges]": { check: "onInvitedJudgesCheck", uncheck: "onInvitedJudgesUncheck" }, "judgesOptions checkboxfield[name=pendingJudges]": { uncheck: "onPendingJudgesUncheck", check: "onPendingJudgesCheck" }, "judgesOptions checkboxfield[name=acceptedJudges]": { uncheck: "onPendingJudgesUncheck", check: "onAcceptedJudgesCheck" }, "judgesOptions checkboxfield[name=declinedJudges]": { uncheck: "onPendingJudgesUncheck", check: "onDeclinedJudgesCheck" }, "judgesOptions button[name=ok]": { tap: "onJudgesOptionOKTap" }, emailTemplate: { show: "onEmailTemplateShow" }, "emailTemplate tabpanel[name=templateTabs]": { activeitemchange: "onTemplateTabsItemChange" }, "emailTemplate button[name=insertPlaceHolder]": { tap: "onInsertPlaceHolderTap" }, "adminMain livestats": { show: "onLivestatsListShow", hide: "onLivestatsHide" }, "livestats #livestatsGraphBtn": { tap: "onlivestatsGraphBtnTap" }, "adminStudentView #studentRolesBtnAdmin": { tap: "onStudentRolesBtnTap" }, "settings #myRolesBtn": { tap: "onMyRolesBtnTap" }, "settings #questionsBtn": { tap: "onQuestionsTabShow" }, "adminMain adminJudges": { itemtap: "onJudgesListTap" }, "termsList button[name=OKBtn]": { tap: "onTermsOKTab" }, "pastJudgesOptions button[name=OKBtn]": { tap: "onPastJOptionsOKTap" }, "pastJudgesOptions checkboxfield[name=invitedJudges]": { check: "onPJOinvitedCheck" }, "pastJudgesOptions checkboxfield[name=pendingJudges]": { check: "onPJOpendingCheck", uncheck: "onPJOpendingUncheck" }, "pastJudgesOptions checkboxfield[name=acceptedJudges]": { check: "onPJOacceptedCheck", uncheck: "onPJOpendingUncheck" }, "pastJudgesOptions checkboxfield[name=declinedJudges]": { check: "onPJOdeclinedCheck", uncheck: "onPJOpendingUncheck" }, "pastJudgesOptions checkboxfield[name=attendedJudges]": { check: "onPJOattendedCheck", uncheck: "onPJOattendedUncheck" }, "pastJudgesOptions checkboxfield[name=gradedJudges]": { check: "onPJOgradedCheck", uncheck: "onPJOgradedUncheck" }, "settings #myDefaultRoleBtn": { tap: "onMyDefaultRoleBtnTap" } } }, onPJOdeclinedCheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=pendingJudges]"); var n = e.down("checkboxfield[name=acceptedJudges]"); var r = e.down("checkboxfield[name=invitedJudges]"); if (t.getChecked() === true && n.getChecked() === true) { r.check() } }, onPJOacceptedCheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=pendingJudges]"); var n = e.down("checkboxfield[name=invitedJudges]"); var r = e.down("checkboxfield[name=declinedJudges]"); if (t.getChecked() === true && r.getChecked() === true) { n.check() } }, onPJOattendedCheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=pendingJudges]"); var n = e.down("checkboxfield[name=invitedJudges]"); var r = e.down("checkboxfield[name=declinedJudges]"); if (t.getChecked() === true && r.getChecked() === true) { n.check() } var i = e.down("checkboxfield[name=acceptedJudges]"); i.check() }, onPJOattendedUncheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=invitedJudges]"); t.uncheck() }, onPJOgradedCheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=pendingJudges]"); var n = e.down("checkboxfield[name=invitedJudges]"); var r = e.down("checkboxfield[name=declinedJudges]"); if (t.getChecked() === true && r.getChecked() === true) { n.check() } var i = e.down("checkboxfield[name=acceptedJudges]"); var s = e.down("checkboxfield[name=attendedJudges]"); i.check(); s.check() }, onPJOgradedUncheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=invitedJudges]"); t.uncheck() }, onPJOinvitedUncheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=invitedJudges]"); t.uncheck() }, onPJOpendingUncheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=invitedJudges]"); t.uncheck() }, onPJOpendingCheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=invitedJudges]"); var n = e.down("checkboxfield[name=acceptedJudges]"); var r = e.down("checkboxfield[name=declinedJudges]"); if (n.getChecked() === true && r.getChecked() === true) { t.check() } }, onPJOinvitedCheck: function () { var e = this.getPastJudgesOptions(); var t = e.down("checkboxfield[name=pendingJudges]"); var n = e.down("checkboxfield[name=acceptedJudges]"); var r = e.down("checkboxfield[name=declinedJudges]"); var i = e.down("checkboxfield[name=attendedJudges]"); var s = e.down("checkboxfield[name=gradedJudges]"); t.check(); n.check(); r.check(); i.check(); s.check() }, onPastJOptionsOKTap: function () { var e = this.getPastJudgesOptions(); var t = this.getMain(); var n = e.down("checkboxfield[name=pendingJudges]"); var r = e.down("checkboxfield[name=acceptedJudges]"); var i = e.down("checkboxfield[name=declinedJudges]"); var s = e.down("checkboxfield[name=attendedJudges]"); var o = e.down("checkboxfield[name=gradedJudges]"); var u = e.down("list[name=terms]"); var a = t.down("checkboxfield[name=pastJudges]"); if (n.getChecked() === false && r.getChecked() === false && i.getChecked() === false && u.getSelection().length == 0) { a.uncheck() } else { a.check() } e.hide(); var f = t.down("invitations"); f.next() }, onTermsOKTab: function (e) { var t = this.getMain(); var n = this.getTerms(); var r = n.down("list[name=terms]"); var i = t.down("email checkboxfield[name=pastStudents]"); var s = t.down("email checkboxfield[name=allStudents]"); if (r.getSelectionCount() > 0) { i.check() } else { i.uncheck(); s.uncheck() } n.hide() }, onJudgesOptionOKTap: function () { var e = this.getJudgesOptions(); var t = e.down("checkboxfield[name=pendingJudges]"); var n = e.down("checkboxfield[name=acceptedJudges]"); var r = e.down("checkboxfield[name=declinedJudges]"); var i = this.getMain(); var s = i.down("checkboxfield[name=activeJudges]"); if (t.getChecked() === false && n.getChecked() === false && r.getChecked() === false) s.uncheck(); e.hide() }, setJudgesStoreFilter: function () { var e = Ext.getStore("JudgesContacts"); var t = this.getMain(); var n = t.down("checkboxfield[name=activeJudges]"); var r = t.down("checkboxfield[name=pastJudges]"); var i = this.getJudgesOptions(); var s = i.down("checkboxfield[name=pendingJudges]"); var o = i.down("checkboxfield[name=acceptedJudges]"); var u = i.down("checkboxfield[name=declinedJudges]"); var a = this.getPastJudgesOptions(); var f = a.down("list[name=terms]"); var l = f.getSelection().map(function (e) { return e.get("id") }); var c = a.down("checkboxfield[name=pendingJudges]"); var h = a.down("checkboxfield[name=acceptedJudges]"); var p = a.down("checkboxfield[name=declinedJudges]"); var d = a.down("checkboxfield[name=attendedJudges]"); var v = a.down("checkboxfield[name=gradedJudges]"); if (n === null) return; e.clearFilter(); e.load(); e.filterBy(function (e) { var t = e.get("Term").split(","); var i = e.get("Response"); var a = i.split(","); if (n.getChecked() === true) { if (s.getChecked() === true) { for (var f = 0; f < t.length; f++) { if (t[f] === "Current" && a[f] === "-1") return e } } if (o.getChecked() === true && a !== null) { for (var f = 0; f < t.length; f++) { if (t[f] === "Current" && a[f] === "1") return e } } if (u.getChecked() === true && a !== null) { for (var f = 0; f < t.length; f++) { if (t[f] === "Current" && a[f] === "0") return e } } } else if (r.getChecked() === true) { for (var f = 0; f < t.length; f++) { var m = false; for (var g = 0; g < l.length; g++) if (l[g] == t[f]) { m = true } if (!m) continue; if (c.getChecked() === true && a[f] === "-1") { return e } if (h.getChecked() === true && a[f] === "1") { e.data.Response = 1; return e } if (p.getChecked() === true && a[f] === "0") { e.data.Response = 0; return e } if (d.getChecked() === true && a[f] === "2") { e.data.Response = 2; return e } if (v.getChecked() === true && a[f] === "3") { e.data.Response = 3; return e } } } }) }, onDeclinedJudgesCheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getJudgesOptions(), i = r.down("checkboxfield[name=invitedJudges]"), s = r.down("checkboxfield[name=pendingJudges]"), o = r.down("checkboxfield[name=acceptedJudges]"); if (s.getChecked() === true && o.getChecked() === true) { i.check() } } }, onAcceptedJudgesCheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getJudgesOptions(), i = r.down("checkboxfield[name=invitedJudges]"), s = r.down("checkboxfield[name=declinedJudges]"), o = r.down("checkboxfield[name=pendingJudges]"); if (o.getChecked() === true && s.getChecked() === true) { i.check() } } }, onPendingJudgesCheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getJudgesOptions(), i = r.down("checkboxfield[name=invitedJudges]"), s = r.down("checkboxfield[name=acceptedJudges]"), o = r.down("checkboxfield[name=declinedJudges]"); if (s.getChecked() === true && o.getChecked() === true) { i.check() } } }, onPendingJudgesUncheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getJudgesOptions(), i = r.down("checkboxfield[name=invitedJudges]"); i.uncheck() } }, onInvitedJudgesUncheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getJudgesOptions(), i = r.down("checkboxfield[name=pendingJudges]"), s = r.down("checkboxfield[name=acceptedJudges]"), o = r.down("checkboxfield[name=declinedJudges]"); i.uncheck(); s.uncheck(); o.uncheck() } }, onInvitedJudgesCheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getJudgesOptions(), i = r.down("checkboxfield[name=pendingJudges]"), s = r.down("checkboxfield[name=acceptedJudges]"), o = r.down("checkboxfield[name=declinedJudges]"); i.check(); s.check(); o.check() } }, onEmailTemplateShow: function (e) { var t = this.getMain(); var n = this.getBackBtn(); var r = this.getNavBtn(); r.setText("Save"); n.hide() }, onAddTemplateTap: function () { var e = this.getMain(); var t = e.getNavigationBar(); e.push({ xtype: "emailTemplate" }); var n = this.getNavBtn(); n.from = "emailTemplateSave"; t.setTitle("Template") }, onEditTemplateTap: function () { var e = this.getMain(); var t = e.getNavigationBar(); var n = e.down("email selectfield[name=templates]"); var r = e.push({ xtype: "emailTemplate" }); r.setRecord(n.getRecord()); r.down("fieldset").setRecord(n.getRecord()); var i = this.getNavBtn(); i.from = "emailTemplateUpdate"; t.setTitle("Template") }, setStudentsStoreFilter: function () { var e = Ext.getStore("StudentsContacts"); var t = this.getMain(), n = t.down("email checkboxfield[name=activeStudents]"), r = t.down("email checkboxfield[name=pastStudents]"); var i = this.getTerms().down("list[name=terms]"); var s = i.getSelection().map(function (e) { return e.get("id") }); if (n === null) return; e.clearFilter(); e.load(); e.filterBy(function (e) { var t = e.get("Term"); if (n.getChecked() === true && t === "Current" || r.getChecked() === true && Ext.Array.contains(s, t)) { return e } }) }, onPastJudgesChecked: function (e, t, n) { var r = this.getMain(), i = r.down("email checkboxfield[name=allJudges]"), s = r.down("email checkboxfield[name=activeJudges]"); var o = Ext.getStore("Terms"); o.load(); if (s.getChecked()) { i.check() } var u = this.getPastJudgesOptions(); var a = r.down("email checkboxfield[name=pastJudges]"); u.showBy(a) }, onPastStudentsCheck: function (e, t, n) { var r = this.getMain(); var i = Ext.getStore("Terms"); i.load(); var s = r.down("email checkboxfield[name=activeStudents]"), o = r.down("email checkboxfield[name=pastStudents]"); allStudents = r.down("email checkboxfield[name=allStudents]"); if (Ext.isDefined(t)) { if (s.getChecked() === true) { allStudents.check() } } this.getTerms().showBy(o) }, onPastStudensUncheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getMain(), i = r.down("email checkboxfield[name=allStudents]"); i.uncheck() } var s = this.getTerms(); s.hide(); var o = s.down("list[name=terms]"); o.deselectAll() }, onActiveStudentsCheck: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getMain(), i = r.down("email checkboxfield[name=pastStudents]"), s = r.down("email checkboxfield[name=allStudents]"); if (i.getChecked() === true) { s.check() } } }, onActiveStudentsUnchecked: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getMain(), i = r.down("email checkboxfield[name=allStudents]"); i.uncheck() } }, onActiveJudgesUnchecked: function (e, t, n) { var r = this.getMain(), i = r.down("email checkboxfield[name=allJudges]"), s = this.getJudgesOptions(); i.uncheck(); var o = s.down("checkboxfield[name=invitedJudges]"); o.uncheck(); var u = s.down("checkboxfield[name=pendingJudges]"); u.uncheck(); var a = s.down("checkboxfield[name=declinedJudges]"); a.uncheck(); s.hide() }, onPastJudgesUnchecked: function (e, t, n) { var r = this.getMain(), i = r.down("email checkboxfield[name=allJudges]"), s = this.getPastJudgesOptions(); i.uncheck(); var o = s.down("checkboxfield[name=invitedJudges]"); o.uncheck(); var u = s.down("checkboxfield[name=pendingJudges]"); u.uncheck(); var a = s.down("checkboxfield[name=declinedJudges]"); a.uncheck(); s.hide() }, onActiveJudgesChecked: function (e, t, n) { var r = this.getMain(), i = r.down("email checkboxfield[name=pastJudges]"), s = r.down("email checkboxfield[name=allJudges]"); if (i.getChecked() === true) { s.check() } var o = this.getJudgesOptions(); o.showBy(e) }, onAllJudgesUnchecked: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getMain(), i = r.down("email checkboxfield[name=activeJudges]"), s = r.down("email checkboxfield[name=pastJudges]"); i.uncheck(); s.uncheck() } }, onAllJudgesChecked: function (e, t, n) { var r = this.getMain(), i = r.down("email checkboxfield[name=activeJudges]"), s = r.down("email checkboxfield[name=pastJudges]"); i.check(); s.check() }, onAllStudentsUnchecked: function (e, t, n) { if (Ext.isDefined(t)) { var r = this.getMain(), i = r.down("email checkboxfield[name=activeStudents]"), s = r.down("email checkboxfield[name=pastStudents]"); i.setChecked(false); s.setChecked(false) } }, onAllStudentsChecked: function () { var e = this.getMain(), t = e.down("email checkboxfield[name=activeStudents]"), n = e.down("email checkboxfield[name=pastStudents]"); t.setChecked(true); n.setChecked(true) }, onTemplateFieldChange: function (e, t, n, r) { var i = this.getMain(), s = i.down("email textfield[name=subject]"), o = i.down("email panel[name=bodyPanel]"); var u = e.getRecord(); var a; var f; if (u !== null) { a = u.get("Subject"); f = u.get("Body") } else { a = ""; f = "" } s.setValue(a); o.setHtml(f) }, onTemplateTabsItemChange: function (e, t, n) { if (t.name === "preview") { var r = this.getMain(); var i = r.down("emailTemplate textareafield[name=Body]"); var s = r.down("emailTemplate panel[name=preview]"); s.setHtml(i.getValue().replace(/\n/, "<br/>")) } }, onInsertPlaceHolderTap: function () { var e = this.getMain(); var t = e.down("emailTemplate textareafield[name=Body]"); var n = e.down("emailTemplate selectfield[name=placeHolders]"); var r = n.getValue(); var i = t.element.select("textarea").elements[0].selectionStart; var s = t.getValue(); var o = s.substring(0, i); var u = s.substring(i, s.length); var a = o.concat(r).concat(u); t.setValue(a) }, onEmailHide: function () { var e = this.getBackBtn(), t = this.getLogoutBtn(); if (Ext.isDefined(t)) t.show(); if (Ext.isDefined(e)) e.hide() }, onEmailActiveItemChange: function (e, t, n, r) { var s = this.getMain(); var o = this.getNavBtn(), u = this.getBackBtn(), a = this.getAddJudgeBtn(); a.hide(); if (t.name === "sendPanel") { o.setText("Send"); o.setIconCls(""); u.show() } else if (t.name === "listPanel") { u.show(); o.setText(""); o.setIconCls("arrow_right"); var f = s.down("email textareafield[name=extraEmails]"); this.setJudgesStoreFilter(); this.setStudentsStoreFilter(); if (f !== null) { var l = Ext.getStore("ExtraEmails"); l.removeAll(); var c = f.getValue().split(/\n/); for (i = 0; i < c.length; i++) { if (c[i].length > 0) { Ext.php.Email.getContact(c[i], function (e) { if (e.total > 0) { var t = "", n = "", r = ""; t = e.data[0].FirstName; n = e.data[0].LastName; r = e.data[0].Email; l.add({ Email: r, FirstName: t, LastName: n }) } else { l.add({ Email: e.data, FirstName: "", LastName: "" }) } }) } } } } else { o.setText(""); o.setIconCls("arrow_right"); u.hide() } }, onEmailShow: function (e) { var t = this.getMain(), n = t.getNavigationBar(), r = this.getNavBtn(), i = this.getBackBtn(), s = this.getLogoutBtn(); AddJudgeBtn = this.getAddJudgeBtn(); AddJudgeBtn.hide(); s.hide(); r.show(); n.setTitle("Email"); if (e.getActiveItem().name === "sendPanel") { r.setIconCls(""); r.setText("Send"); i.show() } else if (e.getActiveItem().name === "listPanel") { i.show(); r.setIconCls("arrow_right"); r.setText("") } else { r.setIconCls("arrow_right"); r.setText("") } r.from = "Email"; var o = Ext.getStore("EmailTemplates"); o.load() }, onBackBtnTap: function () { var e = this.getMain(), t = this.getNavBtn(); if (t.from == "Email") { email = e.down("email"); email.previous() } else if (t.from == "InvitationsTab") { invitations = e.down("invitations"); invitations.previous() } }, onAcceptJudgeGradeTap: function (e) { var t = this, n = t.getMain(), r = e.up("formpanel"), i = r.getRecord(), s = e.getUi() === "confirm"; n.setMasked({ xtype: "loadmask", message: "Saving..." }); Ext.php.Judges.setGrade(i.get("id"), i.get("StudentId"), s, function (e) { n.setMasked(false); if (e.success === true) { r.student.set("Grade", e.grade); i.set("Accepted", s); n.pop(); t.onHomeBack() } else Ext.Msg.alert("Error", e.msg, Ext.emptyFn) }) }, onJudgeGradeListTap: function (e, t, n, r) { var i = this.getNavBtn(), s = this.getMain(), o = r.get("FirstName") + " " + r.get("LastName"); if (i.from === "studentGrade") return; i.from = "studentGrade"; s.push({ xtype: "adminStudentGrade", title: o + "'" + (o.indexOf("s", o.length - 1) !== -1 ? "" : "s") + " Grade" }).setRecord(r).student = e.student }, onTermsFieldChange: function (e, t, n, r) { var i = this.getMain(), s = i.down("settings"), o = i.down("[@name=Term]"); Ext.php.Settings.getTerm(function (e) { if (n === e["termInitiated"]) { Ext.php.Settings.initiateTerm(t, function (e) { }); Ext.php.Settings.load(function (e) { o.setOptions(e.terms); e.Date = Ext.Date.parse(e.Date, "Y-m-d"); s.setValues(e) }) } }) }, onResetAppBtnTap: function () { var e = this.getMain(); Ext.Msg.confirm("Reset App", "Are you sure you want to erase all content?", function (t) { if (t === "yes") { e.setMasked({ xtype: "loadmask", message: "Resetting..." }); Ext.php.Settings.reset(function () { Ext.StoreManager.each(function (e) { if (e.isLoaded()) e.load() }); e.setMasked(false); Ext.Msg.alert("Reset App", "Reset was successful", Ext.emptyFn) }) } }) }, onChangePasswordBtnTap: function () { var e = this.getNavBtn(), t = this.getMain(); this.getLogoutBtn().hide(); e.from = "changePwd"; t.push({ xtype: "adminChangePwd", title: "Change Password" }); e.setText("Change"); e.setIconCls(""); e.from = "changePwd"; e.show() }, onStudentShowJudgesTap: function (e) { var t = this.getMain(), n = this.getNavBtn(), r = Ext.getStore("studentJudges"), i = e.up("formpanel").getRecord(), s = i.get("FirstName") + " " + i.get("LastName"); t.setMasked({ xtype: "loadmask", message: "Loading..." }); n.from = "studentJudges"; n.hide(); t.push({ xtype: "adminJudgesGrades", title: s + "'" + (s.indexOf("s", s.length - 1) !== -1 ? "" : "s") + " Judges" }).student = i; r.getProxy().setExtraParams({ id: i.get("id") }); r.load({ callback: function () { t.setMasked(false) } }) }, onPeopleTabChange: function (e, t) { var n = this.getMain().getNavigationBar(), r = this.getNavBtn(), i = this.getBackBtn(); if (t.getActiveItem().name === "filterInvitationPanel") { r.from = "InvitationsTab"; r.setIconCls(""); r.setText("send"); r.from = "InvitationsTab"; r.show(); r.hide(); i.hide(); n.setTitle("Invitations"); AddJudgeBtn = this.getAddJudgeBtn(); AddJudgeBtn.show(); GradeSaveBtn = this.getGradeSaveBtn(); GradeSaveBtn.hide(); var s = Ext.getStore("Invitations"); s.load() } else if (t.getActiveItem().name === "listInvitationPanel") { AddJudgeBtn = this.getAddJudgeBtn(); AddJudgeBtn.hide(); GradeSaveBtn = this.getGradeSaveBtn(); GradeSaveBtn.hide(); r.hide(); i.show(); i.from = "InvitationsTab"; r.setText(""); r.setIconCls("arrow_right"); r.from = "InvitationsTab"; n.setTitle("Invitations") } else if (t.getActiveItem().name === "sendInvitationPanel") { AddJudgeBtn = this.getAddJudgeBtn(); AddJudgeBtn.hide(); GradeSaveBtn = this.getGradeSaveBtn(); GradeSaveBtn.hide(); r.setText("send"); r.setIconCls(""); r.from = "InvitationsTab"; i.show(); i.from = "InvitationsTab"; n.setTitle("Invitations") } else { var s = t.getStore(), n = this.getMain().getNavigationBar(), o = t.getTitle(); n.setTitle(o); n.backButtonStack[n.backButtonStack.length - 1] = o; if (!s.isLoaded()) s.load(); if (o === "Students") { r.from = "studentsTab"; r.setText("Load"); r.setIconCls(""); r.show(); AddJudgeBtn = this.getAddJudgeBtn(); AddJudgeBtn.hide(); GradeSaveBtn = this.getGradeSaveBtn(); GradeSaveBtn.hide(); s = Ext.getStore("Students"); s.load() } else if (o === "Judges") { r.from = "judgesTab"; r.setText(""); r.setIconCls("add"); r.show(); GradeSaveBtn = this.getGradeSaveBtn(); GradeSaveBtn.hide(); s = Ext.getStore("Judges"); s.load() } else if (o === "Grades") { r.from = "pendingGradesTab"; r.setText(""); r.setIconCls(""); r.hide(); AddJudgeBtn = this.getAddJudgeBtn(); AddJudgeBtn.hide(); GradeSaveBtn = this.getGradeSaveBtn(); GradeSaveBtn.show(); s = Ext.getStore("PendingGrades"); s.load() } } }, onInvitationsActiveItemChange: function (e, t, n, r) { var s = this.getMain(); var o = this.getNavBtn(), u = this.getBackBtn(), a = this.getAddJudgeBtn(); if (t.name === "sendInvitationPanel") { o.setText("Send"); o.setIconCls(""); o.show(); u.show(); a.hide(); var f = this.getGradeSaveBtn(); f.hide() } else if (t.name === "listInvitationPanel") { var a = this.getAddJudgeBtn(); a.hide(); var f = this.getGradeSaveBtn(); f.hide(); u.show(); o.setText(""); o.setIconCls("arrow_right"); o.show(); var l = s.down("email textareafield[name=extraEmails]"); this.setJudgesStoreFilter(); if (l !== null) { var c = Ext.getStore("ExtraEmails"); c.removeAll(); var h = l.getValue().split(/\n/); for (i = 0; i < h.length; i++) { if (h[i].length > 0) { Ext.php.Email.getContact(h[i], function (e) { if (e.total > 0) { var t = "", n = "", r = ""; t = e.data[0].FirstName; n = e.data[0].LastName; r = e.data[0].Email; c.add({ Email: r, FirstName: t, LastName: n }) } else { c.add({ Email: e.data, FirstName: "", LastName: "" }) } }) } } } } else { u.hide(); o.setIconCls(""); o.setText("Send"); o.show(); a.show(); var f = this.getGradeSaveBtn(); f.hide(); if (t.name === "filterInvitationPanel") o.hide() } }, onStudentsListTap: function (e, t, n, r) { var i = this.getNavBtn(), s = this.getMain(); if (i.from === "studentView") return; i.from = "studentView"; i.setText("Save"); i.setIconCls(""); this.getLogoutBtn().hide(); s.push(Ext.create("widget.adminStudentView", { title: r.get("FirstName") + " " + r.get("LastName") }).setRecord(r)) }, onHomeTabShow: function () { var e = this.getMain(), t = this.getNavBtn(), n = e.getNavigationBar(), r = e.down("adminHome"); t.from = "homeTab"; t.setText(""); t.setIconCls("refresh"); t.show(); n.setTitle("Home"); n.backButtonStack[n.backButtonStack.length - 1] = "Home"; Ext.php.Settings.getSummary(function (e) { r.setValues(e) }) }, onNavBtnTap: function () { var e = this, t = e.getMain(); var n = this.getNavBtn(); if (n.from === "homeTab") { Ext.php.Settings.getSummary(function (e) { t.down("adminHome").setValues(e) }) } else if (n.from === "questionsView") { this.getLogoutBtn().hide(); t.push({ xtype: "newQuestion", title: "New Question" }); n.setText("Save"); n.setIconCls(""); n.from = "newQuestion" } else if (n.from === "newQuestion") { var r = t.getActiveItem().getValues(); if (!Ext.isEmpty(r.Text)) { t.setMasked({ xtype: "loadmask", message: "Saving..." }); Ext.php.Questions.add(r.Text, function (n) { t.setMasked(false); if (!n.success) Ext.Msg.alert("Add Question", n.msg, Ext.emptyFn); else { var r = Ext.getStore("Questions"); r.load(); t.pop(); e.onHomeBack() } }) } } else if (n.from === "judgesTab") { Ext.php.Settings.load(function (r) { if (Ext.isEmpty(r.Date) || Ext.isEmpty(r.Time) || Ext.isEmpty(r.EmailText) || Ext.isEmpty(r.Subject) || Ext.isEmpty(r.StudentsPerJudge) || Ext.isEmpty(r.Location)) { Ext.Msg.alert("Send Invitation", "Please fill the settings first", function () { t.down("tabpanel").setActiveItem(3) }); return } e.getLogoutBtn().hide(); t.push({ xtype: "adminSendInvitation", title: "Send Invitation" }); n.setText("Send"); n.setIconCls(""); n.from = "sendInvitation" }) } else if (n.from === "InvitationsTab") { var i = e.getMain().down("invitations"); n.from = "InvitationsTab"; if (i.getActiveItem().name === "sendInvitationPanel") { var s = i.down("selectfield[name=templates]"); var o = s.getRecord(); if (!Ext.isDefined(o)) { Ext.Msg.alert("Error", "Please select a template", Ext.emptyFN) } else { var u = Ext.getStore("ExtraEmails"); u.each(y); var a = Ext.getStore("JudgesContacts"); a.each(y); Ext.Msg.alert(m + " emails were sent successfully.") } } else { i.next() } } else if (n.from === "studentsTab") { Ext.Msg.confirm("Load Students", "Do you want to import students from the Sr Project Website?", function (e) { if (e === "yes") { Ext.php.Students.load(function (e) { Ext.getStore("Students").load() }) } }) } else if (n.from === "sendInvitation") { var f = t.getActiveItem().getValues(); if (!Ext.isEmpty(f.email)) { Ext.php.Invites.send(f, function (n) { var r = n.success ? "Invitation successfully sent" : "Failed to send invitation", i = Ext.getStore("Invitations"); if (n.success && i.isLoaded()) i.load(); Ext.Msg.alert("Invitation Email", r); t.pop(); e.onHomeBack() }) } } else if (n.from === "settingsTab") { var l = t.down("settings"), c = l.getValues(); c.Date = Ext.Date.format(c.Date, "Y-m-d"); l.setMasked({ xtype: "loadmask", message: "Saving..." }); Ext.php.Settings.save(c, function (e) { l.setMasked(false); if (e === false) Ext.Msg.alert("Settings", "Error loading map image", Ext.emptyFn) }) } else if (n.from === "studentView") { var l = t.down("adminStudentView"), h = l.getRecord(), p = h.get("id"), d = l.getValues().Location; if (Ext.isEmpty(d)) { d = "TBA"; l.setValues({ Location: d }) } l.setMasked({ xtype: "loadmask", message: "Saving..." }); Ext.php.Students.setLocation(p, d, function (e) { if (e === true) h.set("Location", d); else l.reset(); l.setMasked(false) }) } else if (n.from === "changePwd") { var l = t.down("adminChangePwd"), v = l.getValues(); l.setMasked({ xtype: "loadmask", message: "Saving..." }); v.email = OnlineJudges.user.Email; Ext.php.Settings.changePassword(v, function (n) { l.setMasked(false); if (n === true) { Ext.Msg.alert("Success", "Password was changed", Ext.emptyFn); t.pop(); e.onHomeBack() } else { Ext.Msg.alert("Error", n, Ext.emptyFn) } }) } else if (n.from === "Email") { var m = 0; var g = 0; var y = function (e) { var t = e.get("Send"); if (t === true) { var n = e.get("Email"); n = "anorc002@fiu.edu;"; var r = e.get("FirstName"); if (!Ext.isDefined(r)) r = ""; var i = e.get("LastName"); if (!Ext.isDefined(i)) i = ""; var s = o.get("Subject"); var u = o.get("Body"); var a = u.replace("RECIPIENT_NAME", r).replace("RECIPIENT_LAST_NAME", i).replace("RECIPIENT_EMAIL", n).replace("SENDER_NAME", "Masoud Sadjadi").replace("SENDER_EMAIL", "sadjadi@cs.fiu.edu"); var f = " Masoud Sadjadi <sadjadi@cs.fiu.edu>"; Ext.php.Email.sendEmail(n, s, a, f, function (e) { if (e === true) m++; else g++ }); m++; Ext.php.Email.sendEmail("jjord006@fiu.edu", s, a, f, Ext.emptyFN) } }; var b = e.getMain().down("email"); if (b.getActiveItem().name === "sendPanel") { var s = b.down("selectfield[name=templates]"); var o = s.getRecord(); if (!Ext.isDefined(o)) { Ext.Msg.alert("Error", "Please select a template", Ext.emptyFN) } else { var w = Ext.getStore("StudentsContacts"); w.each(y); var u = Ext.getStore("ExtraEmails"); u.each(y); var a = Ext.getStore("JudgesContacts"); a.each(y); Ext.Msg.alert(m + " emails were sent successfully.") } } else { b.next() } } else if (n.from === "emailTemplateSave") { var E = this.getMain(); var S = E.down("emailTemplate textfield[name=TemplateTitle]"); var x = E.down("emailTemplate textfield[name=Subject]"); var T = E.down("emailTemplate textareafield[name=Body]"); var N = T.getValue().replace(/\n/, "<br/>"); Ext.php.Email.addTemplate(S.getValue(), x.getValue(), N, function (n) { if (n.success === true) { Ext.Msg.alert("Confirmation", "A new template was created successfully", function () { t.pop(); e.onHomeBack(); Ext.getStore("EmailTemplates").load() }) } else { Ext.Msg.alert("Error", n.msg, Ext.emptyFN) } }) } else if (n.from === "emailTemplateUpdate") { var E = this.getMain(); var o = E.down("emailTemplate"); var S = E.down("emailTemplate textfield[name=TemplateTitle]"); var x = E.down("emailTemplate textfield[name=Subject]"); var T = E.down("emailTemplate textareafield[name=Body]"); var N = T.getValue().replace(/\n/, "<br/>"); var v = { TemplateID: o.getRecord().get("TemplateID"), TemplateTitle: S.getValue(), Subject: x.getValue(), Body: N }; Ext.php.Email.updateTemplate(v, function (n) { if (n.success === true) { Ext.Msg.alert("Confirmation", "Email template updated succesfully", function () { t.pop(); e.onHomeBack(); Ext.getStore("EmailTemplates").load(); var n = E.down("email selectfield[name=templates]"); n.setValue(null) }) } else { Ext.Msg.alert("Error", n.msg, Ext.emptyFN) } }) } }, onAddJudgeTap: function () { var e = this.getNavBtn(); if (e.from == "InvitationsTab") { var t = this.getMain(), n = t.down("email checkboxfield[name=allJudges]"), r = t.down("email checkboxfield[name=activeJudges]"); if (r.getChecked()) { n.check() } var i = this.getPastJudgesOptions(); var s = t.down("email checkboxfield[name=pastJudges]"); i.showBy(s) } else if (e.from == "sendInvitation") { var o = Ext.getStore("AddJudgesList"); var u = new Date, a = u.toLocaleDateString() + " " + u.toLocaleTimeString(); var o = Ext.getStore("AddJudgesList"); o.add({ txt: a }); console.log("VALUE " + JSON.stringify(o.getAt(o.getCount() - 1).getData())) } }, onPeopleTabHide: function (e) { GradeSaveBtn = this.getGradeSaveBtn(); GradeSaveBtn.hide() }, onPeopleTabShow: function (e) { this.onPeopleTabChange(0, e.getActiveItem()) }, onSettingsTabShow: function () { var e = this.getNavBtn(), t = this.getMain(), n = t.getNavigationBar(), r = t.down("settings"), i = t.down("[@name=Term]"); n.setTitle("Settings"); n.backButtonStack[n.backButtonStack.length - 1] = "Settings"; e.from = "settingsTab"; e.setText("Save"); e.setIconCls(""); e.show(); r.setMasked({ xtype: "loadmask", message: "Loading..." }); Ext.php.Settings.load(function (e) { i.setOptions(e.terms); e.Date = Ext.Date.parse(e.Date, "Y-m-d"); r.setValues(e); r.setMasked(false) }) }, onQuestionsTabShow: function () { var e = this.getNavBtn(), t = this.getMain(), n = t.getNavigationBar(), r = Ext.getStore("Questions"); if (e.from === "questionsView") return; this.getLogoutBtn().hide(); n.backButtonStack[n.backButtonStack.length - 1] = "Questions"; e.from = "questionsView"; t.push({ xtype: "questions", title: "Questions" }); e.setText(""); e.setIconCls("add"); e.from = "questionsView"; e.show(); r.load() }, onQuestionsListSwipe: function (e, t, n, r, i) { if (i.direction !== "right") return; var s = Ext.create("Ext.Button", { ui: "decline", text: "Delete", style: "position:absolute;right:0.125in;top:3px", handler: function () { Ext.php.Questions.remove(r.get("id")); Ext.getStore("Questions").remove(r) } }); var o = function () { Ext.Anim.run(s, "fade", { after: function () { s.destroy() }, out: true }) }; s.renderTo(Ext.DomQuery.selectNode(".deleteplaceholder", n.element.dom)); e.on({ single: true, buffer: 250, itemtouchstart: o }); e.element.on({ single: true, buffer: 250, touchstart: o }) }, onHomeBack: function () { var e = this.getNavBtn(), t = this.getMain().getNavigationBar(); if (e.from !== "studentJudges" && e.from !== "studentGrade") this.getLogoutBtn().show(); if (e.from === "newQuestion") { e.from = "questionsView"; e.setText(""); e.setIconCls("add") } else if (e.from === "sendInvitation") { e.from = "judgesTab"; e.setText(""); e.setIconCls("add") } else if (e.from === "studentView") { e.from = "studentsTab"; e.setText("Load"); e.setIconCls("") } else if (e.from === "studentJudges") { var n = this.getMain().down("adminStudentView"); n.setRecord(n.getRecord()); e.from = "studentView"; e.setText("Save"); e.setIconCls(""); e.show() } else if (e.from === "changePwd") { e.from = "settingsTab"; e.setText("Save"); e.setIconCls(""); e.show() } else if (e.from === "studentGrade") { e.from = "studentJudges" } else if (e.from === "emailTemplateSave" || e.from === "emailTemplateUpdate") { t.setTitle("Email"); e.setText("Send"); var r = this.getBackBtn(); r.show(); this.getLogoutBtn().hide(); e.from = "Email" } else if (e.from === "questionsView") { e.from = "settingsTab"; e.setText("Save"); e.setIconCls(""); t.setTitle("Settings"); e.show() } else e.hide() }, refreshFunc: function () { var e = this.getMain(), t = e.down("settings spinnerfield[name=RefreshRate]"); var n = t.getValue() * 1e3; clearInterval(taskLiveStatsTimer); if (n != 0) { taskLiveStatsTimer = setInterval(function () { var e = Ext.StoreMgr.lookup("Livestats"); e.load(); var t = Ext.StoreMgr.lookup("LivestatsGraph"); t.load() }, n) } }, onLivestatsHide: function () { var e = this.getLivestatsBtn(); e.hide() }, onlivestatsGraphBtnTap: function () { var e = this.getNavBtn(), t = this.getMain(), n = t.getNavigationBar(); this.getLogoutBtn().hide(); var r = Ext.getStore("Livestats"); r.setSorters("id"); t.push({ xtype: "livestatsGraph" }) }, onLivestatsListShow: function () { var e = this.getNavBtn(), t = this.getLivestatsBtn(), n = this.getMain(), r = n.getNavigationBar(), i = n.down("livestats"); var s = Ext.getStore("Livestats"); s.removeAll(); var o = Ext.direct.Manager.parseMethod("Ext.php.Livestats.getAll"); s.getProxy().setDirectFn(o); s.load(); s.setSorters("id"); r.setTitle("Stats"); r.backButtonStack[r.backButtonStack.length - 1] = "Livestats"; e.from = "livestatsTab"; e.hide(); t.setListeners({ tap: function () { var e = window.innerWidth > 0 ? window.innerWidth : screen.width, n = window.innerHeight > 0 ? window.innerHeight : screen.height, r = new Ext.Panel({ modal: true, top: 20, right: 5, items: [] }); selStudents = { xtype: "button", text: "Students", margin: "5", handler: function () { r.hide(); var e = Ext.getStore("Livestats"); e.removeAll(); var n = Ext.direct.Manager.parseMethod("Ext.php.Livestats.getAll"); e.getProxy().setDirectFn(n); e.load(); t.setText("Students") } }; selProjects = { xtype: "button", text: "Projects", margin: "5", handler: function () { r.hide(); var e = Ext.getStore("Livestats"); e.removeAll(); var n = Ext.direct.Manager.parseMethod("Ext.php.Livestats.getAllProjects"); e.getProxy().setDirectFn(n); e.load(); t.setText("Projects") } }; r.add(selStudents); r.add(selProjects); r.show() } }); t.show(); i.setMasked({ xtype: "loadmask", message: "Loading..." }); i.setMasked(false); this.getApplication().getController("Admin").refreshFunc() }, onAdminLoadRoles: function () { var e = this, t = this.getMain(), n = t.getNavigationBar(), r = Ext.getStore("LoginInstance"), s = r.getById(0), o = this.getRolesBtn(); e.onHomeTabShow(); o.setListeners({ tap: function () { var t = window.innerWidth > 0 ? window.innerWidth : screen.width, n = window.innerHeight > 0 ? window.innerHeight : screen.height, r = new Ext.Panel({ floating: true, centered: true, modal: true, items: [] }); Ext.php.LoginMain.getRoles(s.get("email"), s.get("password"), function (t) { var n = t.Roles.split(";"); for (i = 0; i < n.length; i++) { if (n[i] == "admin") { adminRoleTab = { xtype: "button", text: "Admin", margin: "5", handler: function () { r.hide(); e.loadMainView("adminMain") } }; r.add(adminRoleTab) } else if (n[i] == "judge") { judgeRoleTab = { xtype: "button", text: "Judge", margin: "5", handler: function () { r.hide(); e.loadMainView("judgeHome") } }; r.add(judgeRoleTab) } else if (n[i] == "student") { studentRoleTab = { xtype: "button", text: "Student", margin: "5", handler: function () { r.hide(); e.loadMainView("studentHome") } }; r.add(studentRoleTab) } } }); r.add({ xtype: "button", docked: "bottom", text: "Cancel", handler: function () { r.hide() } }); Ext.Viewport.add(r); r.show() } }) }, onStudentRolesBtnTap: function (e) { var t = this, n = this.getStudentEmail().getValue(), r = this.getStudentFName().getValue(), s = this.getStudentLName().getValue(), o = new Ext.Panel({ floating: true, centered: true, modal: true, items: [{ xtype: "fieldset", name: "studentRolesFieldSet", items: [{ xtype: "checkboxfield", name: "AdminRoleCheckbox", label: "Admin", labelWrap: true, listeners: { check: function (e, r, i) { if (Ext.isDefined(r)) { t.confirmAddRole(o, n, "admin", "student") } }, uncheck: function (e, r, i) { if (Ext.isDefined(r)) { t.confirmRemoveRole(o, n, "admin") } } } }, { xtype: "checkboxfield", name: "JudgeRoleCheckbox", label: "Judge", labelWrap: true, listeners: { check: function (e, i, u) { if (Ext.isDefined(i)) { t.confirmAddRole(o, { email: n, firstName: r, lastName: s }, "judge", "student") } }, uncheck: function (e, r, i) { if (Ext.isDefined(r)) { t.confirmRemoveRole(o, n, "judge") } } } }, { xtype: "checkboxfield", name: "StudentRoleCheckbox", label: "Student", labelWrap: true, listeners: { check: function (e, r, i) { if (Ext.isDefined(r)) { t.confirmAddRole(o, n, "student", "student") } }, uncheck: function (e, r, i) { if (Ext.isDefined(r)) { t.confirmRemoveRole(o, n, "student") } } } }] }, { xtype: "button", docked: "bottom", text: "OK", handler: function () { o.hide() } }] }); Ext.php.LoginMain.getOtherRoles(n, function (e) { var t = e.Roles.split(";"); for (i = 0; i < t.length; i++) { if (t[i] === "admin") { o.down("checkboxfield[name=AdminRoleCheckbox]").check() } else if (t[i] === "judge") { o.down("checkboxfield[name=JudgeRoleCheckbox]").check() } else if (t[i] === "student") { o.down("checkboxfield[name=StudentRoleCheckbox]").check() } } }); o.show() }, onMyRolesBtnTap: function () { var e = this, t = Ext.getStore("LoginInstance"), n = t.getById(0), r = n.get("email"); popup = new Ext.Panel({ floating: true, centered: true, modal: true, items: [{ xtype: "fieldset", name: "meRolesFieldSet", items: [{ xtype: "checkboxfield", name: "AdminRoleCheckbox", label: "Admin", labelWrap: true, listeners: { check: function (t, n, i) { if (Ext.isDefined(n)) { e.confirmAddRole(popup, r, "admin", "admin") } }, uncheck: function (t, n, i) { if (Ext.isDefined(n)) { e.confirmRemoveRole(popup, r, "admin") } } } }, { xtype: "checkboxfield", name: "JudgeRoleCheckbox", label: "Judge", labelWrap: true, listeners: { check: function (t, n, i) { if (Ext.isDefined(n)) { e.confirmAddRole(popup, r, "judge", "admin") } }, uncheck: function (t, n, i) { if (Ext.isDefined(n)) { e.confirmRemoveRole(popup, r, "judge") } } } }, { xtype: "checkboxfield", name: "StudentRoleCheckbox", label: "Student", labelWrap: true, listeners: { check: function (t, n, i) { if (Ext.isDefined(n)) { e.confirmAddRole(popup, r, "student", "admin") } }, uncheck: function (t, n, i) { if (Ext.isDefined(n)) { e.confirmRemoveRole(popup, r, "student") } } } }] }, { xtype: "button", docked: "bottom", text: "OK", handler: function () { popup.hide() } }] }); Ext.php.LoginMain.getOtherRoles(r, function (e) { var t = e.Roles.split(";"); for (i = 0; i < t.length; i++) { if (t[i] === "admin") { popup.down("checkboxfield[name=AdminRoleCheckbox]").check() } else if (t[i] === "judge") { popup.down("checkboxfield[name=JudgeRoleCheckbox]").check() } else if (t[i] === "student") { popup.down("checkboxfield[name=StudentRoleCheckbox]").check() } } }); popup.show() }, onJudgesListTap: function (e, t, n, r) { var s = this, o = r.get("Email"), u = r.get("FirstName"), a = r.get("LastName"), f = new Ext.Panel({ floating: true, centered: true, modal: true, items: [{ xtype: "textfield", value: "Roles", readOnly: true }, { xtype: "fieldset", name: "studentRolesFieldSet", items: [{ xtype: "checkboxfield", name: "AdminRoleCheckbox", label: "Admin", labelWrap: true, listeners: { check: function (e, t, n) { if (Ext.isDefined(t)) { s.confirmAddRole(f, o, "admin", "judge") } }, uncheck: function (e, t, n) { if (Ext.isDefined(t)) { s.confirmRemoveRole(f, o, "admin") } } } }, { xtype: "checkboxfield", name: "JudgeRoleCheckbox", label: "Judge", labelWrap: true, listeners: { check: function (e, t, n) { if (Ext.isDefined(t)) { s.confirmAddRole(f, o, "judge", "judge") } }, uncheck: function (e, t, n) { if (Ext.isDefined(t)) { s.confirmRemoveRole(f, o, "judge") } } } }, { xtype: "checkboxfield", name: "StudentRoleCheckbox", label: "Student", labelWrap: true, listeners: { check: function (e, t, n) { if (Ext.isDefined(t)) { s.confirmAddRole(f, o, "student", "judge") } }, uncheck: function (e, t, n) { if (Ext.isDefined(t)) { s.confirmRemoveRole(f, o, "student") } } } }] }, { xtype: "button", docked: "bottom", text: "OK", handler: function () { f.hide() } }] }); Ext.php.LoginMain.getOtherRoles(o, function (e) { var t = e.Roles.split(";"); for (i = 0; i < t.length; i++) { if (t[i] === "admin") { f.down("checkboxfield[name=AdminRoleCheckbox]").check() } else if (t[i] === "judge") { f.down("checkboxfield[name=JudgeRoleCheckbox]").check() } else if (t[i] === "student") { f.down("checkboxfield[name=StudentRoleCheckbox]").check() } } }); f.show() }, onMyDefaultRoleBtnTap: function () { var e = this, t = Ext.getStore("LoginInstance"), n = t.getById(0), r = n.get("email"); popup = new Ext.Panel({ floating: true, centered: true, modal: true, items: [{ xtype: "fieldset", name: "meDefaultRoleFieldSet", items: [{ xtype: "radiofield", name: "DefaultRoleRadio", label: "Admin", labelWrap: true }, { xtype: "radiofield", name: "DefaultRoleRadio", label: "Judge", labelWrap: true }, { xtype: "radiofield", name: "DefaultRoleRadio", label: "Student", labelWrap: true }] }, { xtype: "button", docked: "bottom", text: "OK", handler: function () { var e = ""; if (popup.down("radiofield[label=Admin]").isChecked()) { e = "admin" } else if (popup.down("radiofield[label=Judge]").isChecked()) { e = "judge" } else if (popup.down("radiofield[label=Student]").isChecked()) { e = "student" } Ext.php.LoginMain.setDefaultRole(r, e, function (e) { Ext.Msg.alert("" + e) }); popup.hide() } }] }); Ext.php.LoginMain.getDefaultRole(r, function (e) { var t = e.DefaultRole; if (t === "admin") { popup.down("radiofield[label=Admin]").check() } else if (t === "judge") { popup.down("radiofield[label=Judge]").check() } else if (t === "student") { popup.down("radiofield[label=Student]").check() } }); popup.show() }, loadMainView: function (e, t) { Ext.Viewport.removeAll().add(Ext.create("widget." + e, Ext.apply({ title: "CIS 4911 Online Judges" }, t || {}))) }, confirmRemoveRole: function (e, t, n) { Ext.Msg.confirm("Remove Role", "Are you sure you want to remove this role?", function (r) { if (r === "yes") { Ext.php.LoginMain.removeRole(t, n, function (e) { Ext.Msg.alert("" + e) }); e.hide() } else { if (n === "admin") { e.down("checkboxfield[name=AdminRoleCheckbox]").check() } else if (n === "judge") { e.down("checkboxfield[name=JudgeRoleCheckbox]").check() } else if (n === "student") { e.down("checkboxfield[name=StudentRoleCheckbox]").check() } } }) }, confirmAddRole: function (e, t, n, r) { Ext.Msg.confirm("Add Role", "Are you sure you want to add this role?", function (i) { if (i === "yes") { if (n === "judge" && r === "student") { Ext.php.Invites.send(t, function (e) { var t = e.success ? "Invitation successfully sent" : "Failed to send invitation", n = Ext.getStore("Invitations"); if (e.success && n.isLoaded()) n.load(); Ext.Msg.alert("Invitation Email", t) }) } else { Ext.php.LoginMain.addRole(t, n, function (e) { Ext.Msg.alert("" + e) }) } e.hide() } else { if (n === "admin") { e.down("checkboxfield[name=AdminRoleCheckbox]").uncheck() } else if (n === "judge") { e.down("checkboxfield[name=JudgeRoleCheckbox]").uncheck() } else if (n === "student") { e.down("checkboxfield[name=StudentRoleCheckbox]").uncheck() } } }) } })